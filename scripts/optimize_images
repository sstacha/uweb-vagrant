#!/bin/bash
# script to optimize images
# OK typing this up since I have re-written this several times now and I need to get the thoughts down.  
# The idea is simple.  There is a source and a target directory.  Defaults are in the script and they can be overridden
# by options.  -a (all) will blow away the target directory and re-sync the source directory by directory.  -d will diff the 2
# directories and add each one that is in the source but not in the target.  NOTE: later will add the cleanup as a todo. -r 
# will remove a provided argument (must be file) from the cache if it exists.  No option will take the provided argument (or 
# source directory if none given) and determine if it is a file or directory sync and apply it accordingly.

# Initialize our constants:
MAKE_CHANGES=true
USE_POSTERIZE=false
USE_IMAGE_OPTIM_DEFAULT=false
USE_SVGO=false
# todo: change to true when we want to convert everything to webp versions of the files
# NOTE: The idea is that the webserver will serve up webp to those that support it instead of the regular file
ENABLE_WEBP=false
IGNORE_FILES=".DS_Store .git"
IGNORE_DIRECTORIES="/home/ubuntu/server/website/docroot/images/fixed-images /tmp/test-noprocess"
IMAGE_MAX_WIDTH=1024
IMAGE_FILE_EXTENSIONS="jpg jpeg png tiff gif JPG JPEG PNG TIFF GIF"
# todo: uncomment when we are ready to do different sizes
# IMAGE_FILE_WIDTH_SIZES="300 600 1080"
IMAGE_FILE_WIDTH_SIZES=""

# Initialize our variables:
# default source and target dirs; change this for your environment
# _image_source='/home/ubuntu/server/website/docroot/'
# _image_target='/home/ubuntu/server/website/images'
# _image_source='/Users/sstacha/dev/projects/spe/vagrant/ubuntu/djangocms/website_content/media'
#_image_source='/Users/sstacha/dev/projects/spe/test_images/'
#_image_target='/Users/sstacha/dev/projects/spe/optimized_images'
_image_source='/tmp/test/source'
_image_target='/tmp/test/dest'
# option choices
_all=false
_remove_cache=false
_convert=false
_optimize="$USE_IMAGE_OPTIM_DEFAULT"
_diff=false
_log_verbose=false
# absolute versions of the source and target parameters
_full_source_pattern=""
_full_source_dir=""
_full_target_dir=""

debug () {
		if [ "$_log_verbose" = "true" ] ; then
        	echo "$1";
        fi
}

debug_variables() {
    debug ""
    debug "options: "
    debug "---------"
    debug "all:$_all"
    debug "remove cache:$_remove_cache"
    debug "optimize:$_optimize"
    debug "diff:$_diff"
    debug "verbose logging:$_log_verbose"
    debug "argument: $@"
    debug ""
    debug "path vars: "
    debug "-----------"
    debug "_image_source:$_image_source"
    debug "_image_target:$_image_target"
    debug "full source_pattern: $_full_source_pattern"
    debug "full source_dir: $_full_source_dir"
    debug "full target_pattern: $_full_target_pattern"
    debug "full_target_dir: $_full_target_dir"
    debug "constants: "
    debug "-----------"
    debug ""
    debug "MAKE_CHANGES: $MAKE_CHANGES"
    debug "IGNORE_FILES: $IGNORE_FILES"
    debug "IMAGE_MAX_WIDTH: $IMAGE_MAX_WIDTH"
    debug "IMAGE_DEFAULT_WIDTH: $IMAGE_DEFAULT_WIDTH"
    debug "USE_POSTERIZE: $USE_POSTERIZE"
    debug "USE_IMAGE_OPTIM_DEFAULT: $USE_IMAGE_OPTIM_DEFAULT"
    debug "USE_SVGO: $USE_SVGO"
    debug "ENABLE_WEBP: $ENABLE_WEBP"
    debug ""
}

show_help() {
    echo "usage: ./uweb_images.sh [-h/?][-a][-v][-o][-f][-d][-s][-t]"
    echo "     -h or ?: show usage help"
    echo "     -v: show verbose logging"
    echo "     -r: remove cached image"
    echo "     -a: all - runs both convert and optimize on all images (if dir) or image (if file)"
    echo "     -o: override the default value to determine if we optimize with compression (uses image_optim) values=true,false [default=USE_IMAGE_OPTIM_DEFAULT]"
    echo "     -d: recursively runs conversion and optimizations on only files different between the directories instead of all files in all directories"
    echo "     -s: use the path given as an override for the source directory where optimized images are stored (must be root directory)"
    echo "     -t: use the path given as an override for the target directory where optimized images are stored"
    echo " argument: use the path or file given as an override for the source file or directory (fails if not in the source directory)"
    echo "Example: optimize_images -v -s /tmp/test_originals/ -t /tmp/optimized some/subdir/
    echo "      -- will blow away /tmp/optimized and copy just the /tmp/originals/some/subdir/ to /tmp/optimized/some/subdir/
}

strip_slash() {
    echo "$1"|sed 's/\/$//g'
}
strip_leading_slash() {
    echo "$1"|sed 's/^\///g'
}
trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}
## determine if the path is relative and if so adds the pwd or passed parameter; we need to do operations on absolute files
#get_absolute_file() {
#    _gaf_curdir=$(pwd)
#    _opt_file="$1"
#    # echo "gaf curdir: $_gaf_curdir"
#    # if the source file or directory doesn't start with a slash then append the cwd
#    if [[ ${_opt_file:0:1} == "/" ]] ;then
#        echo $_opt_file
#    else
#        echo "$_gaf_curdir/$_opt_file"
#    fi
#}
# converts a relative path/file value to an absolute one
get_abs() {
    _ga_curdir=$(pwd)
    # debug "_ga_curdir: $_ga_curdir"
    _opt_arg="$1"
    # debug "_opt_arg: $1"
    # echo $(pwd)
    # echo "gaf curdir: $_gaf_curdir"
    # if the source file or directory doesn't start with a slash then append the cwd
    if [[ ${_opt_arg:0:1} == "/" ]] ;then
        # debug "returning $_opt_arg"
        echo $_opt_arg
    else
        # debug "returning $_ga_curdir/$_opt_arg"
        echo "$_ga_curdir/$_opt_arg"
    fi
}
# builds a source or target abs based on rules
get_source_abs() {
    # first check that the abs is not already source.  If not and relative then cac from source base.
    _bsa_path="$(get_abs $_optarg)"
    # debug "_bsa_path: $_bsa_path"
    if [[ $(echo $_bsa_path | grep "$_image_source") ]]; then
        # debug "[build_source_abs] $_bsa_path is in the image source directory.  we are good..."
        echo $_bsa_path
    else
        # attempt instead to build from the source dir if we are relative
        if [[ ${_optarg:0:1} == "/" ]] ;then
            # debug "[build_source_abs] $_optarg is absolute already so we error and bail"
            echo "[$_bsa_path] was an absolute path that was not in the source directory.  This is not allowed.  Reset the source direcotry with the -s option, change the default directory to match or cd to the source directory and try again."
            exit 1
        else
            # debug "[build_source_abs] $_optarg is relative; attempting to add the source path"
            # debug "_image_source: $_image_source"
            
            if [[ -d "$_image_source/$_optarg" || -f "$_image_source/$_optarg" ]]; then
                echo "$_image_source/$_optarg"
            else
                echo "[$_bsa_path] was not in the source directory and when appended to the source directory [$_image_source] it did not exist."
                exit 1
            fi
        fi  
    fi
}
get_target_abs() {
    # first check that the abs is not already source.  If not and relative then cac from source base.
    _bta_path="$(get_abs $_optarg)"
    # debug "_bta_path: $_bta_path"
    if [[ $(echo $_bta_path | grep "$_image_target") ]]; then
        # debug "[build_target_abs] $_bta_path is in the image target directory.  we are good..."
        echo $_bta_path
    else
        # attempt instead to build from the target dir if we are relative
        if [[ ${_optarg:0:1} == "/" ]] ;then
            # debug "[build_target_abs] $_optarg is absolute already so we error and bail"
            echo "[$_bta_path] was an absolute path that was not in the target directory.  This is not allowed.  Reset the target direcotry with the -t option, change the default directory to match or cd to the target directory and try again."
            exit 1
        else
            # debug "[build_target_abs] $_optarg is relative; attempting to add the target path"
            # debug "_image_target: $_image_target"
            # debug "testing [$_image_target/$_optarg]"
            
            echo "$_image_target/$_optarg"           
        fi  
    fi
}

#get_abs_path() {
#    _gap_basedir="$(strip_slash $1)"
#    echo "gap base dir: "$_gap_basedir
#    _gap_provided_param="$2"
#    echo "gap provided param: "$_gap_provided_param
#    # if the source file or directory doesn't start with a slash then append the cwd
#    if [[ ${_gap_provided_param:0:1} == "/" ]] ;then
#        echo "gap param started with / so returning public path"
#        echo $_gap_provided_param
#    else
#        echo "gap param didn't start with / so append theem together"
#        echo "$_gap_basedir/$_gap_provided_param"
#    fi
#}

# will call mogrify wrapper for each condition we have for each directory
mogrify_directory() {
    md_size=""
    md_source_dir="$1"
    md_target_dir="$2"
    md_source_dir="$(strip_slash $md_source_dir)"
    md_source_dir="$(strip_slash $md_source_dir)"
    
    if [[ "$md_source_dir" == "$md_target_dir" ]]; then
        md_target_dir=""
    fi
    debug "[mogrify_directory] md_source_dir: $md_source_dir"
    debug "[mogrify_directory] md_target_dir: $md_target_dir"
   
    # when we are asked to mogrify a directory we will do so for each type we support if that type exists in the source dir
    for md_ext in $IMAGE_FILE_EXTENSIONS; do
        # check that we have at least one file with that ext
        if [[ $(ls $md_source_dir/*.$md_ext 2>&1 | grep -v 'No such file or directory') ]]; then
        
            # first call mogrify for each extension without resizing as the default
            debug "[mogrify_directory] calling mogrify wrapper ${md_source_dir}/*.${md_ext} $md_target_dir"
            # echo "*** "${md_source_dir}/*.${md_ext} $md_target_dir
            mogrify_wrapper "${md_source_dir}/*.${md_ext}" "$md_target_dir" "$md_size" "$md_ext"
            if [[ "$ENABLE_WEBP" == "true" ]]; then
                # do the same thing for webp
                mogrify_wrapper "$md_directory/*.$md_ext" $md_target_dir "" "webp $p_ext"
            fi
            for md_size in $IMAGE_FILE_WIDTH_SIZES; do
                md_pattern="$md_directory/*.$md_ext"
    #            p_ext="${md_ext##*.}"
                p_ext="$md_size.$md_ext"
                # then call mogrify for each file size we want in our src selections
                debug "[mogrify_directory] calling mogrify wrapper $md_pattern $md_target_dir $md_size $p_ext"
                mogrify_wrapper $md_pattern $md_target_dir $md_size $p_ext
                if [[ "$ENABLE_WEBP" == "true" ]]; then
                    # do the same thing for webp
                    mogrify_wrapper $md_pattern $md_target_dir $md_size "webp $p_ext"
                fi
            done
        fi
    done

}
# will call mogrify for each condition for each file passed
# this is pretty similar to directory except our pattern is passed through
mogrify_file() {
    mf_full_source=$1
    mf_full_target=$2
    mf_ext="${mf_full_source##*.}"
    
    debug "[mogrify_file] mf_full_source: $mf_full_source"
    debug "[mogrify_file] mf_full_target: $mf_full_target"
    debug "[mogrify_file] mf_ext: $mf_ext"
    
    # when we are asked to mogrify a file we will use it's extension and bail if we don't have one
    if [[ "$mf_ext" == "" ]]; then
        echo "We requested to process a file that did not have an extension; skipping since we wouldn't know what format to use"
    else
        # our target_dir is our full target minus the file part
        mf_target_dir=$(dirname $mf_full_target)
        
        mogrify_wrapper $mf_full_source $mf_target_dir
        if [[ "$ENABLE_WEBP" == "true" ]]; then
            # try converting everything to webp also
            p_ext="webp $mf_ext"
            mogrify_wrapper $mf_full_source $mf_target_dir "" $p_ext
        fi
        for mf_size in $IMAGE_FILE_WIDTH_SIZES; do
            p_ext="$mf_size.$mf_ext"
            # then call mogrify for each file size we want in our src selections
            debug "[mogrify_directory] calling mogrify wrapper $mf_full_source $mf_target_dir $mf_size $p_ext"
            mogrify_wrapper $mf_full_source $mf_target_dir $mf_size $p_ext
            if [[ "$ENABLE_WEBP" == "true" ]]; then
                # try converting everything to webp
                # todo: see if this keeps our .600.webp extension or renames to just .webp
                p_ext="webp $p_ext"
                mogrify_wrapper $mf_full_source $mf_target_dir $mf_size $p_ext
            fi
        done
    fi
}

# common wrapper to mogify with parameters called by file and directory
mogrify_wrapper() {
    debug "[mogrify_wrapper] in mogrify_wrapper()"
    mw_source_pattern="$1"
    mw_target_dir="$2"
    mw_target_size="$3"
    mw_target_ext="$4"

    # we must have a source pattern or error
    if [[ "$mw_source_pattern" == "" ]]; then
        echo "Attempted to call mogrify but nothing was passed for the source file to work against; aborting.  This shouldn't happen."
        exit 1
    fi
    if [[ "$USE_POSTERIZE" == "true" ]]; then
        p_posterize=" -posterize 136"        
    else
        p_posterize=""
    fi
    if [[ "$mw_target_dir" == "" ]]; then
        debug "[mogrify_wrapper] target directory was not passed; omitting from the mogrify call"
        p_target_dir=""
    else
        # make sure we have a target dir if possible to aviod errors in subdirectories
        mkdir -p $mw_target_dir
        p_target_dir="-path $mw_target_dir"
    fi
    if [[ "$mw_target_size" == "" ]]; then
        debug "[mogrify_wrapper] target size was not passed; defaulting to less than IMAGE_MAX_WIDTH"
        p_target_size="-resize 1024>"
    else
        p_target_size="-resize $mw_target_size"
    fi
    if [[ "$mw_target_ext" == "" ]]; then
        debug "[mogrify_wrapper] target extension was not passed; omitting from the mogrify call"
        p_target_ext=""
    else
        p_target_ext="-format $mw_target_ext"
    fi

    debug "[mogrify_wrapper] mw_source_pattern: $mw_source_pattern"
    debug "[mogrify_wrapper] mw_target_dir: $mw_target_dir"
    debug "[mogrify_wrapper] p_target_dir: $p_target_dir"
    debug "[mogrify_wrapper] mw_target_size: $mw_target_size"
    debug "[mogrify_wrapper] p_target_size: $p_target_size"
    debug "[mogrify_wrapper] mw_target_ext: $mw_target_ext"
    debug "[mogrify_wrapper] p_target_ext: $p_target_ext"
    debug "[mogrify_wrapper] calling \"mogrify $p_target_dir $p_target_ext $p_target_size -filter Triangle -define filter:support=2 -thumbnail 100% -unsharp 0.25x0.08+8.3+0.045 -dither None$p_posterize -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $mw_source_pattern\""


    # make our mogrify call with the options we have
    if [[ "$MAKE_CHANGES" == "true" ]]; then
        mogrify $p_target_dir $p_target_ext $p_target_size -filter Triangle -define filter:support=2 -thumbnail 100% -unsharp 0.25x0.08+8.3+0.045 -dither None$p_posterize -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $mw_source_pattern
    fi
}
# main method to do the resize and scaling optimizations (routes to file or directory versions above)
smartresize() {
    debug '[smartresize] $1: '$1
    sr_source="$1"
    sr_target_dir="$_full_target_dir"

    # when we call smartresize we pass a source pattern; this could be a file or directory or it could be a glob pattern like ne*
    # we will separate the absolute path from the pattern and run a find to get either a single file or directory or a set of files and directories
    # at this point we should always have an absolute path with either a file, folder, or pattern
    # if it contains a file we want to run mogrify on it for each size
    if [[ -f "$sr_source" ]]; then
        debug "[smartresize] determined source passed was a file; calling file mogrify..."
        mogrify_file $sr_source
    elif [[ -d "$sr_source" ]]; then
        debug "[smartresize] determined source passed was a directory; calling directory mogrify for each directory recursively..."
        # stripping the last slash if it is there so I don't get double slashes after apending the *
        sr_folder=$(strip_slash "$sr_source")
        # first call for our directory then all children
        debug "[smartresize] calling directory mogrify $sr_source"
        mogrify_directory $sr_source
        for d in $(find $sr_folder/* -type d); do
            debug "[smartresize] calling directory mogrify $d"
            mogrify_directory $d
        done
    else
        # we have a pattern so lets issue a find with the pattern and then for each file call mogrify
        for f in $(find $sr_source -type f | grep -E '.gif$|.jpg$|.jpeg$|.png$|.tiff$'); do
            debug "[smartresize] calling file mogrify $f"
            mogrify_file $f
        done
    fi
}

# parse all options using getargs...
# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

while getopts "h?vao:dt:r" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  _log_verbose=true
        ;;
    r)  _remove_cache=true
        ;;
    a)  _all=true
        ;;
    o)  _optimize=$OPTARG
        ;;
    d)  _diff=true
        ;;
    s)  _image_source=$OPTARG
        ;;
    t)  _image_target=$OPTARG
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift


# NOTE: need for cache removals since we default _image_source
_optarg=$@
# make sure we do not have a slash at the end of our directories or pattern
_image_source=$(strip_slash $_image_source)
_image_target=$(strip_slash $_image_target)

#if [ ! -z $@ ]; then
#	_image_source=$@
#fi
if [[ $_optarg ]]; then
    debug "calling get_source_abs $_optarg"
    _full_source_pattern=$(get_source_abs $_optarg)
    debug "get_source_abs returned [$_full_source_pattern]"
    _full_target_pattern=$(get_target_abs $_optarg)
    debug "get_target_abs returned [$_full_target_pattern]"
else
    debug "calling get_abs $_image_source"
    _full_source_pattern=$(get_abs $_image_source)
    debug "get_source_abs returned [$_full_source_pattern]"
    _full_target_pattern=$(get_target_abs $_target_source)
    debug "get_target_abs returned [$_full_target_pattern]"
fi
if [[ -d "$_full_source_pattern/" ]]; then
    _full_source_dir=$_full_source_pattern
else
    _full_source_dir="$(dirname "$_full_source_pattern/")"
fi
_full_target_dir="$(get_abs $_image_target)"
# make sure we do not have a slash at the end of our directories or pattern
_full_source_pattern=$(strip_slash $_full_source_pattern)
_full_source_dir=$(strip_slash $_full_source_dir)
_full_target_pattern=$(strip_slash $_full_target_pattern)
_full_target_dir=$(strip_slash $_full_target_dir)

debug_variables

# ----- validation rules before we start executing with options ------
# make sure the _image_source and _image_target exist and are directories; do not error if the output doesn't exist prompt and create
# if the _full_target_pattern is blank then lets print the output and bail since we shouldn't ever have this case happen unless my script is messed up
if [[ "$_full_target_pattern" == "" ]]; then
    _log_verbose=true
    echo "The full target pattern was empty; this should not happen.  If we were to continue we would attempt to write to the root directory and this should not be allowed.  We should ALWAYS be somewhere within the target directory [$_full_target_dir].  Debug this coding error."
    echo "variables:"
    debug_variables
    exit 1
fi
# check that we have appropriate directories or bail
if [[ ! -d "$_full_source_dir" ]]; then
    echo "The full_source_directory does not exist; you can include a file as the first argument but you must supply the source root directory that exists"
    exit 1
fi
if [[ "$_remove_cache"  == "true" ]]; then
    # make sure our full_target_pattern exists or error
    if [[ -d "$_full_target_pattern" || -f "$_full_target_pattern" ]]; then
        debug "validation: [$_full_target_pattern] exists; continuing..."
    else
        echo "You have requested to remove the target file or directory [$_full_target_pattern], however, the file or directory does not exist.  Please set the default script variable correctly or add an argument to specify the file or directory to act upon that exists."
        exit 1
    fi    
else
    if [[ -d "$_full_source_pattern" || -f "$_full_source_pattern" ]]; then
        debug "validation: [$_full_source_pattern] exists; continuing..."
    else
        echo "You have requested to optimize images passing the file or directory [$_image_source] evaluated to [$_full_source_pattern].  The file or directory does not exist so there will be nothing to optimize.  Please set the default script variable correctly or add an argument to specify the file or directory to act upon."
        exit 1
    fi
fi
if [ -f "$_full_target_dir" ]; then
    echo "The target directory exists as a file.  This is not allowed.  You must pass a directory to put the resulting optimized image(s) in.  Please change the default or use the option: -t <target dir> specifying a directory"
    exit 1
elif [ -d "$_full_target_dir" ]; then
    debug "validation: [$_full_target_dir] exists and is a directory; continuing..."
else
    echo "The target directory to store the optimized images [$_full_target_dir] does not exist.  This could be becuase it is incorrect or becuse it doesn't exist yet. If it is incorrect, re-run and use the option: -t <target dir>"
    echo 'Do you to create the target directory for the optimized images and proceed? [y/N]'
    read _user_answer
    debug "user answer: [$_user_answer]"
    echo ""
    if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
        echo " "
        echo "done"
        exit 0
    fi
    if [[ "$MAKE_CHANGES" == "true" ]]; then
        # they said yes so create the directory if we can
        mkdir -p $_full_target_dir
    fi
fi
# we do allow files for the source but if we do a diff then we need a directory since otherwise a diff does not make sense
if [[ "$_diff" = "true" && ! -d "$_full_source_pattern" ]]; then
    echo "You have asked to run conversions and optimizations on files that differ between the source and target directories, however, [$_full_source_pattern] is not a directory.  Please ensure you use a source directory when using the diff option."
    exit 1
fi
# if we do an all don't allow for the source to be a file (must be dir)
if [[ "$_all" = "true" && ! -d "$_full_source_pattern" ]]; then
    echo "You have asked to optimize all files from the source [$_full_source_pattern] to the target [$_full_target_dir], however, [$_full_source_pattern] is not a directory.  Please ensure you use a source directory when using the all option."
    exit 1
fi

# if we don't have an image source given or defaulted bail!
if [ -z $_image_source ]; then
	echo "You have requested to optimize images without giving a source or a defaulted source in the script.  There is nothing to do.  Add a default source or pass something as a parameter."
	exit 0
fi


echo ' '
# ----- validation rules before we start executing with options ------

# if we get a diff option remove all files removed from source and call smartresize and optimize on all files added to source
if [ "$_diff" = "true" ]; then
	debug '[diff] running conversion and optimization on all images not in the target directory...'
    # ensure the source has a slash or things don't work right
    # NOTE: pattern must be a directory at this point! already validated.
    _tmp_source=$_full_source_pattern/
    debug "[diff] _tmp_source: $_tmp_source"
    debug "[diff] _full_target_pattern: $_full_target_pattern"
    debug "executing rsync -nrvc --delete --ignore-existing $_tmp_source $_full_target_pattern | grep -E '.gif$|.jpg$|.jpeg$|.png$|.tiff$|.GIF$|.JPG$|.JPEG$|.PNG$|.TIFF$'"
    newfiles=$(rsync -nrvc --delete --ignore-existing $_tmp_source $_full_target_pattern | grep -E '.gif$|.jpg$|.jpeg$|.png$|.tiff$|.GIF$|.JPG$|.JPEG$|.PNG$|.TIFF$' | grep -v 'deleting')
    echo "converting and optimizing all files only in the source directory [$_full_source_pattern]: "
    for nf in $newfiles; do
        debug "[diff] nf: $nf"
        _full_convert=$(strip_slash "$_full_source_pattern")/$(strip_leading_slash "$nf")
        _full_optim=$(strip_slash "$_full_target_pattern")/$(strip_leading_slash "$nf")
        debug "[diff] converting [$_full_convert]"
        mogrify_file "$_full_convert" "$_full_optim"
        echo "     converted [$_full_convert]"
        if [[ "$_optimize" == "true" ]]; then
            if [[ "$MAKE_CHANGES" == "true" ]]; then
                if [[ "$USE_SVGO" == "true" ]]; then
                    debug "[diff] calling image_optim -r --nopngout $_full_optim"
                    image_optim -r --no-pngout $_full_optim
                else
                    debug "[diff] calling image_optim -r --nopngout --no-svgo $_full_optim"
                    image_optim -r --no-pngout --no-svgo $_full_optim                
                fi
            fi
            echo "     optimized [$_full_optim]"
        fi
        

        # we need to trim our directory before sending since diff has <directory>:<filename with extension> and we need to get rid of the colon and add a /
#        dtrim=${nf%:*}  # retain the part before the colon
#        ftrim=${nf##*:} # retain the part after the last colon
#        debug "[diff] dtrim: $dtrim"
#        debug "[diff] ftrim: $ftrim"
#        debug "[diff] calling smartresize $dtrim/$ftrim"
#        if [[ "$MAKE_CHANGES" == "true" ]]; then
#            smartresize "$dtrim/$ftrim"
#            image_optim -r --no-pngout $_full_target_dir/$ftrim
#        fi
#        echo "     optimized [$dtrim/$ftrim]"
    done
    echo "done"
    exit 0
fi
# do a check for removal first
if [[ "$_remove_cache" == "true" ]]; then
    debug "[remove cache] removing requested directory or file pattern [$_full_target_pattern]!"
    if [[ "$MAKE_CHANGES" == "true" ]]; then
        rm -rf $_full_target_pattern
    fi
    echo "executed rm for [$_full_target_pattern]"

	echo "done"
    exit 0
fi
# if we get the all option just delete everything and set the convert and optimize options which should call smartresize for the source folder
if [ "$_all" = "true" ]; then
    # save off our current directory so we can put it back when we are done
    _all_curdir=$(pwd)
    # make sure full_target doesn't have any slash
    debug "[all] removing target directory contents [$_full_target_dir]!"
	if [[ "$MAKE_CHANGES" == "true" ]]; then
        if [[ "$_full_target_dir" != "" ]]; then
            debug "[all] executing rm -rf $_full_target_dir"
            rm -rf $_full_target_dir
        fi
    fi
    echo "[$_full_target_dir] deleted.  recreating..."
    # all will always delete the directory and then run mogrify_directory for each directory and subdirectory
    cd $_full_source_pattern
    for d in $(find . -type d); do
        # remove the .
        _tmp_dir=${d:1}
        debug "[all] _tmp_dir: $_tmp_dir"
        _tmp_target="$_full_target_dir"
        _tmp_source="$_full_source_pattern"
        debug "[all]      converting [$d]"
        debug "[all] executing mogrify_directory $_tmp_source$_tmp_dir $_tmp_target$_tmp_dir"
        mogrify_directory $_tmp_source$_tmp_dir $_tmp_target$_tmp_dir
        echo "     converted [$_tmp_source$_tmp_dir]"
        if [[ "$_optimize" == "true" ]]; then
            if [[ "$MAKE_CHANGES" == "true" ]]; then
                if [[ "$USE_SVGO" == "true" ]]; then
                    debug "[diff] calling image_optim -r --nopngout $_tmp_target$_tmp_dir"
                    image_optim -r --no-pngout $_tmp_target$_tmp_dir
                else
                    debug "[diff] calling image_optim -r --nopngout --no-svgo $_tmp_target$_tmp_dir"
                    image_optim -r --no-pngout --no-svgo $_tmp_target$_tmp_dir                
                fi
            fi
            echo "     optimized [$_tmp_target$_tmp_dir]"
        fi
    done
    cd $_all_curdir
    echo "done"
    exit 0
fi

## if we are still here they just used a source on the command line (or left default)
## extra wrapper to determine file or directory
#
#debug "[default] passing to smartresize to determine wether directory or file sync should be used"
#debug "[default] calling smart_resize"
#smart_resize 
#if [[ "$_optimize" == "true" ]]; then
#    if [[ "$MAKE_CHANGES" == "true" ]]; then
#        if [[ "$USE_SVGO" == "true" ]]; then
#            debug "[diff] calling image_optim -r --nopngout $_full_target_pattern"
#            image_optim -r --no-pngout $_full_target_pattern
#        else
#            debug "[diff] calling image_optim -r --nopngout --no-svgo $_full_optim"
#            image_optim -r --no-pngout --no-svgo $_full_target_pattern               
#        fi
#    fi
#    echo "     optimized [$_full_target_pattern]"
#fi
