#!/bin/bash
# script to optimize images

log_verbose=false
debug () {
		if [ "$log_verbose" = "true" ] ; then
        	# log all messages
        	echo $1;
        fi
}

show_help() {
    echo "usage: ./uweb_images.sh [-h][-a][-v][-c][-o][-f][-d][-s][-t]"
    echo "     -h: show usage help"
    echo "     -v: show verbose logging"
    echo "     -a: all (runs both convert and optimize) on all images"
    echo "     -c: convert all images and crop any >1028 width"
    echo "     -o: optimize all images with compression (uses image_optim)"
    echo "     -f: runs optimizations on one file from within a directory instead of all files in all directories"
    echo "     -d: recursively runs optimizations on only files different between the directories instead of all files in all directories"
    echo "     -s: use the path given as an override for the source directory where images are stored"
    echo "     -t: use the path given as an override for the target directory where optimized images are stored"
    # echo " no option: start in watch mode for folder changes"
}

# Initialize our own variables:
IMAGE_MAX_WIDTH=1024
IMAGE_DEFAULT_WIDTH=600
# IMAGE_SOURCE_DIR='/home/ubuntu/server/website/docroot/templates/docroot'
# IMAGE_TARGET_DIR='/home/ubuntu/server/website/images'
IMAGE_SOURCE_DIR='/vagrant/test_images'
IMAGE_TARGET_DIR='/vagrant/test_optimized'

# parse all options using getargs...
# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

_all=false
_convert=false
_optimize=false
_file=false
_log_verbose=false

while getopts "h?vacof:ds:t:" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  log_verbose=true
        ;;
    a)  _all=true
        ;;
    c)  _convert=true
        ;;
    o)  _optimize=true
        ;;
    f)  _file=$OPTARG
        ;;
    d)  _diff=true
        ;;
    s)  IMAGE_SOURCE_DIR=$OPTARG
        ;;
    t)  IMAGE_TARGET_DIR=$OPTARG
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

debug "options: "
debug "all:$_all"
debug "convert:$_convert"
debug "optimize:$_optimize"
debug "file:$_file"
debug "diff:$_diff"
debug "verbose logging:$_log_verbose"
debug "IMAGE_SOURCE_DIR:$_IMAGE_SOURCE_DIR"
debug "IMAGE_TARGET_DIR:$_IMAGE_TARGET_DIR"
debug "argument: $@"
debug ""

if [ -z $output_file ]; then
	output_file=$@
fi

get_responsive_image_suffix() {
    pattern=$1
    size=$2
    debug "size: $size"
    ext=$(expr match "$1" '.*\(\.[a-Z]*\)')
    debug "ext: $ext"
    debug "pattern: $pattern"
    extlen=${#ext}
    debug "extlen: $extlen"
    filelen=${#pattern}
    debug "filelen: $filelen"
    poslen=$(expr $filelen - $extlen)
    debug "poslen: $poslen"
    if [[ "$size" ]] && [[ "$size" != $IMAGE_DEFAULT_WIDTH ]]; then
        debug "returning: $size${1:$poslen}"
        echo $size"${1:$poslen}"
    else
        debug "returning: ${1:$poslen+1}"
        echo "${1:$poslen+1}"
    fi
}

smartresize() {
#    echo '$1: '$1 '$2: '$2
    pattern="$1"
    size="$2"
#    echo "smartpattern: $pattern"
#    echo "smartsize: $size"
    ext=$(expr match "$1" '.*\(\.[a-Z]*\)')
#    echo "ext: $ext"
#    echo "pattern: $pattern"
    extlen=${#ext}
#    echo "extlen: $extlen"
    filelen=${#pattern}
#    echo "filelen: $filelen"
    poslen=$(expr $filelen - $extlen)
#    echo "poslen: $poslen"
    if [[ "$size" ]] && [[ "$size" != $IMAGE_DEFAULT_WIDTH ]]; then
        mogrify_ext="$size${1:$poslen}"
#        echo "mogrify_ext: $mogrify_ext"
    else
        mogrify_ext="${1:$poslen+1}"
#        echo "mogrify_ext: $mogrify_ext"
    fi
    
    #ris="$(get_responsive_image_suffix $smartresizepattern $smartresizesize)"
    if ls $pattern 1> /dev/null 2>&1; then
#    if [[ "$ris" ]]; then
#        echo "ris: $ris"
        mogrify -path $3 -format "$mogrify_ext" -resize $IMAGE_MAX_WIDTH\> -filter Triangle -define filter:support=2 -thumbnail 100% -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $1
#    else
#        mogrify -path $3 -filter Triangle -define filter:support=2 -thumbnail $2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $smartresizepattern
#    fi
    fi
}

get_responsive_image_name() {
    ext=$(expr match "$1" '.*\(\.[a-Z]*\)')
    extlen=${#ext}
    filelen=${#1}
    poslen=$(expr $filelen - $extlen)
    if [[ "$2" ]] && [[ "$2" != $IMAGE_DEFAULT_WIDTH ]]; then
        echo "${1:0:$poslen}".$2"${1:$poslen}"
    else
        echo $1
    fi
}

get_responsive_image_path() {
    echo "$(sed -e 's/\(.*\)\/docroot/\1\/images/' <<< "$1")"
}

get_absolute_docroot_path() {
    x=${1:2}
    if [[ "$x" ]]; then
        echo $IMAGE_SOURCE_DIR/$x
    else
        echo $IMAGE_SOURCE_DIR
    fi
}

get_absolute_image_path() {
    x=${1:2}
    if [[ "$x" ]]; then
        echo $IMAGE_TARGET_DIR/$x
    else
        echo $IMAGE_TARGET_DIR 
    fi
}

remake_responsive_image () {
    remove_responsive_image $1 $2 $3
    add_responsive_image $1 $2 $3
}

add_responsive_image () {
    echo "output directory: [$3]"
    echo "changing directory to [$1]"
    cd $1
#    echo $(pwd)
    echo "adding responsive images for [$2]"
    # first resize to images directory with the default file name then others
#    size=600
#    echo "size: "$size
#    echo "newfile: "$newfile
    smartresize $2 600 $3
#    size=300
#    newfile="$(get_responsive_image_name $2 $size)"
#    echo "newfile: "$newfile
    smartresize $2 300 $3
#    size=1200
#    newfile="$(get_responsive_image_name $2 $size)"
#    echo "newfile: "$newfile
    smartresize $2 1200 $3
}
remove_responsive_image () {
    echo "removing responsive images for [$1$2]"
    echo "removing [$3$(get_responsive_image_name $2 600)]..."
    rm $3"$(get_responsive_image_name $2 600)"
    echo "removing [$3$(get_responsive_image_name $2 300)]..."
    rm $3"$(get_responsive_image_name $2 300)"
    echo "removing [$3$(get_responsive_image_name $2 1200)]..."
    rm $3"$(get_responsive_image_name $2 1200)"
}

is_img_ext() {
    if [[ "$1" =~ (jpg|jpeg|gif|tiff|png)$ ]]; then 
        echo true
    else
        echo false
    fi
}

# ----- validation rules before we start executing with options ------
# make sure the IMAGE_SOURCE_DIR and IMAGE_TARGET_DIR exist and are directories; do not error if the output doesn't exist prompt and create
# check that we have appropriate directories or bail
if [ -d "$IMAGE_SOURCE_DIR" ]; then
    debug "[$IMAGE_SOURCE_DIR] exists; continuing..."
else
    echo "You have requested to optimize images passing the directory [$IMAGE_SOURCE_DIR].  The directory does not exist so there will be nothing to optimize.  Please set the default script variable correctly or pass in the source directory option with -s <source dir path>"
    exit 1
fi
if [ -f "$IMAGE_TARGET_DIR" ]; then
    echo "The target directory exists as a file.  This is not allowed.  You must pass a directory to put the resulting optimized images in.  Please remove the file or pass in a different target directory option with -t <target dir>"
    exit 1
elif [ -d "$IMAGE_TARGET_DIR" ]; then
    debug "[$IMAGE_TARGET_DIR] exists; continuing..."
else
    echo "The target directory to store the optimized images [$IMAGE_TARGET_DIR] does not exist.  This could be becuase it is incorrect or becuse it doesn't exist yet. If it is incorrect, re-run and pass in the target directory option with -t <target dir path>"
    echo 'Do you to create the target directory for the optimized images and proceed? [y/N]'
    read _user_answer
    debug "user answer: [$_user_answer]"
    echo ""
    if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
        echo " "
        echo "done"
        exit 0
    fi
    # they said yes so create the directory if we can
    mkdir -p $IMAGE_TARGET_DIR
fi

# ----- validation rules before we start executing with options ------

# initialize to the tmp dir to prevent and deletions to files we don't expect
cd /tmp

echo 'document base (source image directory): '$IMAGE_SOURCE_DIR
echo 'IMAGE_TARGET_DIR: '$IMAGE_TARGET_DIR
echo ' '
debug '$_file: '$_file
if [ -z $_file ]; then
	debug "no file given; skipping..."
else
    echo "optimizing [$_file]..."
    # the only difference is that we get the cwd and apply to the filename given
    # get the current directory for use
    curdir=$(pwd)
    # find the docroot path and then get whats left
    debug "curdir: $curdir"
    debug `echo $curdir | sed -r "s $IMAGE_SOURCE_DIR  g"`
    debug "$(echo $curdir | sed -r "s $IMAGE_SOURCE_DIR  g")"
    debug "IMAGE_SOURCE_DIR: $IMAGE_SOURCE_DIR"
    relpath="$(echo $curdir | sed -r "s $IMAGE_SOURCE_DIR  g")"
    debug "relpath: $relpath"
    # take this and append to the images directory
    newpath=$IMAGE_TARGET_DIR$relpath
    debug "newpath: $newpath"
    
    # execute the image magick and optimizer on the file
    smartresize "$_file" 600 $newpath
    image_optim -r --no-pngout $newpath/$_file
    echo "done"
    exit 0
fi

debug '$_diff: '$_diff
if [ "$_diff" = "true" ]; then
    debug 'deleting all images not in the docroot directory...'
    delfiles=$(diff -r $IMAGE_SOURCE_DIR $IMAGE_TARGET_DIR | grep $IMAGE_TARGET_DIR | grep '^Only' | grep -E '.gif$|.jpg$|.jpeg$|.png$|.tiff$' | awk '{print $3$4}')
    echo "files only in IMAGE_TARGET_DIR:"
    for df in $delfiles; do
        dtrim=${df%:*}  # retain the part before the colon
        ftrim=${df##*:} # retain the part after the last colon
        echo "     deleting [$dtrim/$ftrim]"
        rm $dtrim/$ftrim
    done
	debug 'running conversion and optimization on all images in the image directory...'
    newfiles=$(diff -r $IMAGE_SOURCE_DIR $IMAGE_TARGET_DIR | grep $IMAGE_SOURCE_DIR | grep '^Only' | grep -E '.gif$|.jpg$|.jpeg$|.png$|.tiff$' | awk '{print $3$4}')
    echo "files only in IMAGE_SOURCE_DIR:"
    for nf in $newfiles; do
        echo "     optimizing [$nf]"
        # we need to trim our directory before sending
        dtrim=${nf%:*}  # retain the part before the colon
        ftrim=${nf##*:} # retain the part after the last colon
        debug "dtrim: $dtrim"
        debug "ftrim: $ftrim"
        relpath="$(echo $dtrim | sed -r "s $IMAGE_SOURCE_DIR  g")"
        newpath=$IMAGE_TARGET_DIR$relpath
        debug "relpath: $relpath"
        debug "newpath: $newpath"
        cd $dtrim
        mkdir -p $dtrim
        # execute the image magick and optimizer on the file
        smartresize "$ftrim" 600 $newpath
        image_optim -r --no-pngout $newpath/$ftrim

    done
    echo "done"
    exit 0
fi


debug '$_all: '$_all
debug '$_convert: '$_convert
if [ "$_all" = "true" ]; then
    _convert="true"
    _optimize="true"
	debug 'running conversion and optimization on the image directory...'
fi
if [ "$_convert" = "true" ]; then
	debug 'wiping and converting the image directory...'
    cd $IMAGE_TARGET_DIR
	rm -rf *	
	echo "images deleted.  recreating..."
    cd $IMAGE_SOURCE_DIR
    # smartresize2 ".*\.\(jpg\|jpeg\|png\|gif\|tiff\)$" 600 $IMAGE_TARGET_DIR
    for d in $(find . -type d); do
        adp=$(get_absolute_docroot_path $d)
        echo $adp
        # echo "absolute docroot path $adp"
        aip=$(get_absolute_image_path $d)
        # echo "absolute image path $aip"
        mkdir -p $aip
        cd $adp
        # smartresize '*.{jpg|jpeg|gif|tiff|png}' 300 $aip
        # smartresize '*.{jpg|jpeg|gif|tiff|png}' 600 $aip
        # smartresize '*.{jpg|jpeg|gif|tiff|png}' 1200 $aip
#        # echo "generating 300px images for all .jpg..."
#        smartresize '*.jpg' 300 $aip
#        # echo "generating 300px images for all .jpeg..."
#        smartresize '*.jpeg' 300 $aip
#        # echo "generating 300px images for all .gif..."
#        smartresize '*.gif' 300 $aip
#        # echo "generating 300px images for all .tiff..."
#        smartresize '*.tiff' 300 $aip
#        # echo "generating 300px images for all .png..."
#        smartresize '*.png' 300 $aip
        # echo "generating 600px images for all .jpg..."
        smartresize '*.jpg' 600 $aip
        # echo "generating 600px images for all .jpeg..."
        smartresize '*.jpeg' 600 $aip
        # echo "generating 600px images for all .gif..."
        smartresize '*.gif' 600 $aip
        # echo "generating 600px images for all .tiff..."
        smartresize '*.tiff' 600 $aip
        # echo "generating 600px images for all .png..."
        smartresize '*.png' 600 $aip
#        # echo "generating 1200px images for all .jpg..."
#        smartresize '*.jpg' 1200 $aip
#        # echo "generating 1200px images for all .jpeg..."
#        smartresize '*.jpeg' 1200 $aip
#        # echo "generating 1200px images for all .gif..."
#        smartresize '*.gif' 1200 $aip
#        # echo "generating 1200px images for all .tiff..."
#        smartresize '*.tiff' 1200 $aip
#        # echo "generating 1200px images for all .png..."
#        smartresize '*.png' 1200 $aip      
   done
    # smartresize2 '*.{jpg|jpeg|gif|tiff|png}' 600 $IMAGE_TARGET_DIR
    echo "done converting"
    # echo "_optimize: $_optimize"
    if [ "$_optimize" != "true" ]; then
        exit 0
    fi
fi

debug '$_optimize: '$_optimize
if [ "$_optimize" = "true" ]; then
    cd $IMAGE_TARGET_DIR
    image_optim -r --no-pngout .
    echo "done optimizing"
    exit 0
fi
