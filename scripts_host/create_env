#!/bin/bash
# script to build a virtual python envrionment from the requirements.txt file on the server

# Initialize our constants:
MAKE_CHANGES=true

debug () {
		if [ "$_opt_verbose" = "true" ] ; then
        	# log all messages
        	echo $1;
        fi
}
show_help() {
    echo "usage: archive [-h?][-v]"
    echo " ex: create_env -v"
    echo "     -h or ?: show usage help"
    echo "     -v: show verbose logging"
}
get_script_directory() {
    # first try the $0 we might already have an absolute path
    # if the fist character is a / then we are absolute; otherwise assume relative
    _abspath=$(dirname $0)
    if [[ ${_abspath:0:1} == "/" ]] ;then
        echo $_abspath
    else
        echo "$(cd $_abspath && pwd)"
    fi
}

# parse all options using getargs...
# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

while getopts "h?v" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  _opt_verbose=true
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

_arg=$@
debug "options"
debug "----------"
debug "verbose:$_opt_verbose"
debug "argument: $_arg"
debug ""
debug "attempting to update virtualenv and then create an env"
debug ""

_script_dir="$(get_script_directory)"
echo "script directory: $_script_dir"
_script_len=${#_script_dir}
debug "script len: $_script_len"
_rel_vagrant="/vagrant/scripts_host"
_rel_len=${#_rel_vagrant}
debug "rel len: $_rel_len"
UWEB_HOME=${_script_dir:0:(_script_len - _rel_len)}
debug "UWEB_HOME: $UWEB_HOME"
VAGRANT_HOME="$UWEB_HOME/vagrant"
debug "VAGRANT_HOME: $VAGRANT_HOME"
WEBSITE_HOME="$UWEB_HOME/server/website"
debug "WEBSITE_HOME: $WEBSITE_HOME"
_env_dir="$UWEB_HOME/env"
echo "env directory: $_env_dir"
_requirements_file="$WEBSITE_HOME/requirements.txt"
echo "requirements file: $_requirements_file"
echo ""

if [[ -z $WEBSITE_HOME ]]; then
    echo "You requested to create a virtual envrionment but there is not a WEBSITE_HOME environment variable defined.  This should not happen unless the virstual machine was not properly provisioned.  Re-provision the virtual machine and try again."
    exit 1
elif [[ ! -f "$_requirements_file" ]]; then
    echo "You requested to create a virtual python environment but there is not a WEBSITE_HOME/requirements.txt file.  Execute 'vagrant ssh' from the vagrant directory then execute 'update_env' to create the requirement.txt file from inside the virtual machine.  Execute 'exit' to leave the virtual machine and run this script again."
    exit 1
else
    # we might already have an environment; if so prompt then delete and re-create
    source /usr/local/bin/virtualenvwrapper.sh
    _tmpls=$(lsvirtualenv -b | grep "^env$")
    echo "tmpls: $_tmpls"
    if [[ "$_tmpls" != "" ]]; then
        echo "I tried to create a python virtual envrionment [env] based on the virtural machines dependencies [$_requirements_file].  However, a virtual envrionment already exists."
        echo "NOTE: If you have done any pip installs from inside the virtual machine you will need to update the requirements.txt file"
        echo ""
        echo "NOTE: To do so: "
        echo "      Manually edit the [$_requirements_file] file and add the new libraries or..."
        echo "      Execute 'vagrant ssh' from the vagrant directory then execute 'update_env' from inside the virtual machine.  Execute 'exit' to leave the virtual machine and run this script again."
        echo ""
        echo 'Are you sure you want to delete and re-create the virtual environment from the requirments.txt file at this time? [y/N]'
        read _user_answer
        debug "user answer: [$_user_answer]"
        echo ""
        if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
            echo "done"
            exit 0
        fi
        if [[ "$MAKE_CHANGES" == "true" ]]; then
            deactivate
            rmvirtualenv env
        fi
    fi
    if [[ "$MAKE_CHANGES" == "true" ]]; then
        pip3 install virtualenv
        mkvirtualenv --python=/usr/local/bin/python3 --no-site-packages env
        workon env
        pip3 install -r $_requirements_file
        deactivate
    fi
    echo "done"
    workon env
    echo "To develop using the same dependencies as your virtual machine point your ide to [$VIRTUAL_ENV/bin/python3]"
    deactivate
fi