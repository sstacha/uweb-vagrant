#!/bin/bash
# script to build a virtual python envrionment from the requirements.txt file on the server

export CC=/usr/bin/llvm-gcc

# Initialize our constants:
MAKE_CHANGES=true

debug () {
		if [ "$_opt_verbose" = "true" ] ; then
        	# log all messages
        	echo $1;
        fi
}
show_help() {
    echo "usage: create_env [-h?][-v]"
    echo " ex: create_env -v"
    echo "     -h or ?: show usage help"
    echo "     -v: show verbose logging"
}
get_script_directory() {
    # first try the $0 we might already have an absolute path
    # if the fist character is a / then we are absolute; otherwise assume relative
    _abspath=$(dirname $0)
    if [[ ${_abspath:0:1} == "/" ]] ;then
        echo $_abspath
    else
        echo "$(cd $_abspath && pwd)"
    fi
}

# parse all options using getargs...
# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

while getopts "h?v" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  _opt_verbose=true
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

_arg=$@
debug "options"
debug "----------"
debug "verbose:$_opt_verbose"
debug "argument: $_arg"
debug ""
debug "attempting to update virtualenv and then create an env"
debug ""

# NOTE: in the future we may allow an _arg to point to ANY requirements.txt file instead of the built in one...

# for now use the relative location for the script we are executing...
_SCRIPT_HOME="$(get_script_directory)"
debug "script directory: $_SCRIPT_HOME"
_REQUIREMENTS_HOME=$(dirname $(dirname $_SCRIPT_HOME))/server/website
debug "requirements directory: $_REQUIREMENTS_HOME"
_REQUIREMENTS_FILE=$_REQUIREMENTS_HOME/requirements.txt
debug "requirements file: $_REQUIREMENTS_FILE"
echo ""

if [[ ! -f "$_REQUIREMENTS_FILE" ]]; then
    echo "You requested to create a virtual python environment but [$_REQUIREMENTS_FILE] does not exist.  Execute 'vagrant ssh' from the vagrant directory then execute 'update_env' to create the requirement.txt file from inside the virtual machine.  Execute 'exit' to leave the virtual machine and run this script again."
    exit 1
else
    # we might already have an environment; if so prompt then delete and re-create
    source /usr/local/bin/virtualenvwrapper.sh
    _ENVIRONMENT_CHECK=$(lsvirtualenv -b | grep "^env_uweb$")
    debug "lsvirtualenv grep output: $_ENVIRONMENT_CHECK"
    if [[ "$_ENVIRONMENT_CHECK" != "" ]]; then
        echo "I tried to create a python virtual envrionment [env] based on the virtural machines dependencies [$_REQUIREMENTS_FILE].  However, a virtual envrionment [env] already exists."
        echo "NOTE: If you have done any pip installs from inside the virtual machine you will need to update the requirements.txt file"
        echo ""
        echo "NOTE: To do so: "
        echo "      Manually edit the [$_REQUIREMENTS_FILE] file and add the new libraries or..."
        echo "      Execute 'vagrant ssh' from the vagrant directory then execute 'update_env' from inside the virtual machine.  Execute 'exit' to leave the virtual machine and run this script again."
        echo ""
        echo 'Are you sure you want to delete and re-create the virtual environment from the requirments.txt file at this time? [y/N]'
        echo "NOTE: you must not be working in the env directory to continue (includes IDE).  If you do you will get errors.  You can simply run deactivate or close your IDE and run the script again."
        read _user_answer
        debug "user answer: [$_user_answer]"
        echo ""
        if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
            echo "done"
            exit 0
        fi
        if [[ "$MAKE_CHANGES" == "true" ]]; then
            rmvirtualenv env_uweb
        fi
    fi
    if [[ "$MAKE_CHANGES" == "true" ]]; then
        # for some reason I can't get uwsgi to install on the host so I am going to comment it out if I find it
        # also, osx sed sucks so we have to use homebrew install gnu-sed and then use the gsed command; shouldn't affect anthing else
        if [[ "$(which gsed)" == "" ]]; then
            sed -i 's/^uWSGI\=\=/\#uWSGI\=\=/' $_REQUIREMENTS_FILE
        else
            gsed -i 's/^uWSGI\=\=/\#uWSGI\=\=/' $_REQUIREMENTS_FILE
        fi
        pip3 install virtualenv
        mkvirtualenv --python=/usr/local/bin/python3 --no-site-packages env_udev
        workon env_udev
        pip3 install -r $_REQUIREMENTS_FILE
        deactivate
    fi
    echo "done"
    workon env_udev
    echo "To develop using the same dependencies as your virtual machine point your ide to [$VIRTUAL_ENV]"
    deactivate
fi